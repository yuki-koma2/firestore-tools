rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ======= グローバル関数 ==========
    function getRole(uid) {
        return get(/databases/$(database)/documents/UserCollection/$(uid)).data.role;
    }

    function isAdminOrOperator(uid) {
        return getRole(uid) == "ADMIN" || getRole(uid) == "OPERATOR";
    }

    function isAdmin(uid) {
        return getRole(uid) == "ADMIN";
    }

    // foreign key チェック
    function checkFK(documentId, collectionPath) {
        return exists(/databases/$(database)/documents/$(collectionPath)/$(documentId));
    }

    // 認証ステータスチェック
    function checkAuthenticationStatus(auth) {
        return (
            auth != null &&
            auth.token.firebase.sign_in_provider in ['password' , 'google.com'] &&
            auth.token.firebase.sign_in_provider != 'anonymous'
        );
    }

    // Enumバリデーション
    function validateEnum(field, enumValues) {
        return enumValues.hasAny(e => e == field);
    }

    // ======= ユニーク制約のための関数 ==========
    function checkUnique(field, value) {
        return !exists(/databases/$(database)/documents/UniqueIndexes/${field}/$(value));
    }

    function reserveUnique(field, value) {
        return exists(/databases/$(database)/documents/UniqueIndexes/${field}/$(value));
    }

    // ======= コレクションごとのバリデーション関数 ==========
    function validateUserCreate(data) {
        return data.id != null && data.id is string &&
               data.email != null && data.email is string &&
               data.email.size() <= 255 &&
               checkUnique("User.email", data.email) &&
               data.name != null && data.name is string &&
               data.name.size() <= 100 &&
               data.role != null && validateEnum(data.role, ["ADMIN", "GENERAL", "OPERATOR", "MANAGER", "ACCOUNTING"]) &&
               (data.phoneNumbers == null || (data.phoneNumbers is list && data.phoneNumbers.hasOnly(e => e is string))) &&
               (data.authSecondFactor == null || (data.authSecondFactor is list && data.authSecondFactor.hasOnly(e => e is string))) &&
               (data.secondFactorEmail == null || data.secondFactorEmail is string) &&
               data.createdAt != null && data.createdAt is timestamp &&
               data.updatedAt != null && data.updatedAt is timestamp;
    }

    function validateUserUpdate(data, existingData) {
        return data.id == existingData.id &&
               data.email == existingData.email &&
               data.name == existingData.name &&
               data.role == existingData.role &&
               (data.phoneNumbers == null || (data.phoneNumbers is list && data.phoneNumbers.hasOnly(e => e is string))) &&
               (data.authSecondFactor == null || (data.authSecondFactor is list && data.authSecondFactor.hasOnly(e => e is string))) &&
               (data.secondFactorEmail == null || data.secondFactorEmail is string) &&
               data.updatedAt != null && data.updatedAt is timestamp;
    }

    function validatePostCreate(data) {
        return data.id != null && data.id is string &&
               data.title != null && data.title is string &&
               data.title.size() <= 200 &&
               data.content != null && data.content is string &&
               data.status != null && validateEnum(data.status, ["DRAFT", "PUBLISHED", "ARCHIVED"]) &&
               data.authorId != null && data.authorId is string &&
               checkFK(data.authorId, "UserCollection") &&
               data.createdAt != null && data.createdAt is timestamp &&
               data.updatedAt != null && data.updatedAt is timestamp;
    }

    function validatePostUpdate(data, existingData) {
        return data.id == existingData.id &&
               data.title == existingData.title &&
               data.content == existingData.content &&
               data.status == existingData.status &&
               data.authorId == existingData.authorId &&
               data.updatedAt != null && data.updatedAt is timestamp;
    }

    // ======= コレクションのルール ==========
    match /UserCollection/{userId} {
      allow read: if checkAuthenticationStatus(request.auth);
      allow create: if checkAuthenticationStatus(request.auth) && isAdminOrOperator(request.auth.uid) && validateUserCreate(request.resource.data);
      allow update: if checkAuthenticationStatus(request.auth) && (request.auth.uid == resource.data.uid || isAdminOrOperator(request.auth.uid)) && validateUserUpdate(request.resource.data, resource.data);
      allow delete: if checkAuthenticationStatus(request.auth) && isAdmin(request.auth.uid);
    }

    match /Post/{documentId} {
      allow read: if checkAuthenticationStatus(request.auth);
      allow create: if checkAuthenticationStatus(request.auth) && isAdminOrOperator(request.auth.uid) && validatePostCreate(request.resource.data);
      allow update: if checkAuthenticationStatus(request.auth) && (request.auth.uid == resource.data.authorId || isAdminOrOperator(request.auth.uid)) && validatePostUpdate(request.resource.data, resource.data);
      allow delete: if checkAuthenticationStatus(request.auth) && isAdmin(request.auth.uid);
    }

    // ======= ユニークインデックスコレクションのルール ==========
    match /UniqueIndexes/{field}/{value} {
      allow read: if false; // 読み取り禁止
      allow write: if request.auth != null && isAdmin(request.auth.uid); // 管理者のみ書き込み可能
    }

    // 他のコレクションについても同様にルールを追加

  }
}